{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-picker-column-internal_entry_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-picker-column-internal.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-8e692445.js';\nimport { b as getIonMode } from './ionic-global-c74e4951.js';\nimport { r as raf, g as getElementRoot } from './helpers-3b390e48.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-029a46f6.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\n\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\n\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\n\nconst PickerColumnInternal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.isScrolling = false;\n    this.isColumnVisible = false;\n    this.canExitInputMode = true;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n    this.numericInput = false;\n    this.centerPickerItemInView = (target, smooth = true, canExitInputMode = true) => {\n      const { el, isColumnVisible } = this;\n      if (isColumnVisible) {\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n        if (el.scrollTop !== top) {\n          /**\n           * Setting this flag prevents input\n           * mode from exiting in the picker column's\n           * scroll callback. This is useful when the user manually\n           * taps an item or types on the keyboard as both\n           * of these can cause a scroll to occur.\n           */\n          this.canExitInputMode = canExitInputMode;\n          el.scroll({\n            top,\n            left: 0,\n            behavior: smooth ? 'smooth' : undefined,\n          });\n        }\n      }\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = (ev) => {\n      if (!this.numericInput) {\n        return;\n      }\n      const { useInputMode, inputModeColumn } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.setInputModeActive(false);\n        return;\n      }\n      this.setInputModeActive(true);\n    };\n    /**\n     * Setting isActive will cause a re-render.\n     * As a result, we do not want to cause the\n     * re-render mid scroll as this will cause\n     * the picker column to jump back to\n     * whatever value was selected at the\n     * start of the scroll interaction.\n     */\n    this.setInputModeActive = (state) => {\n      if (this.isScrolling) {\n        this.scrollEndCallback = () => {\n          this.isActive = state;\n        };\n        return;\n      }\n      this.isActive = state;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      const { el } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.isScrolling) {\n            hapticSelectionStart();\n            this.isScrolling = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + bbox.width / 2;\n          const centerY = bbox.y + bbox.height / 2;\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          if (activeElement === null || activeElement.disabled) {\n            return;\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n            if (this.canExitInputMode) {\n              /**\n               * The native iOS wheel picker\n               * only dismisses the keyboard\n               * once the selected item has changed\n               * as a result of a swipe\n               * from the user. If `canExitInputMode` is\n               * `false` then this means that the\n               * scroll is happening as a result of\n               * the `value` property programmatically changing\n               * either by an application or by the user via the keyboard.\n               */\n              this.exitInputMode();\n            }\n          }\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            this.isScrolling = false;\n            hapticSelectionEnd();\n            /**\n             * Certain tasks (such as those that\n             * cause re-renders) should only be done\n             * once scrolling has finished, otherwise\n             * flickering may occur.\n             */\n            const { scrollEndCallback } = this;\n            if (scrollEndCallback) {\n              scrollEndCallback();\n              this.scrollEndCallback = undefined;\n            }\n            /**\n             * Reset this flag as the\n             * next scroll interaction could\n             * be a scroll from the user. In this\n             * case, we should exit input mode.\n             */\n            this.canExitInputMode = true;\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.setValue(selectedItem.value);\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n    /**\n     * Tells the parent picker to\n     * exit text entry mode. This is only called\n     * when the selected item changes during scroll, so\n     * we know that the user likely wants to scroll\n     * instead of type.\n     */\n    this.exitInputMode = () => {\n      const { parentEl } = this;\n      if (parentEl == null)\n        return;\n      parentEl.exitInputMode();\n      /**\n       * setInputModeActive only takes\n       * effect once scrolling stops to avoid\n       * a component re-render while scrolling.\n       * However, we want the visual active\n       * indicator to go away immediately, so\n       * we call classList.remove here.\n       */\n      this.el.classList.remove('picker-column-active');\n    };\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view when the picker column\n       * is actively visible to the user.\n       */\n      this.scrollActiveItemIntoView();\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = (entries) => {\n      var _a;\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        this.isColumnVisible = true;\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n      }\n      else {\n        this.isColumnVisible = false;\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n      }\n    };\n    new IntersectionObserver(visibleCallback, { threshold: 0.001 }).observe(this.el);\n    const parentEl = (this.parentEl = this.el.closest('ion-picker-internal'));\n    if (parentEl !== null) {\n      // TODO(FW-2832): type\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n    }\n  }\n  componentDidRender() {\n    var _a;\n    const { activeItem, items, isColumnVisible, value } = this;\n    if (isColumnVisible) {\n      if (activeItem) {\n        this.scrollActiveItemIntoView();\n      }\n      else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n        /**\n         * If the picker column does not have an active item and the current value\n         * does not match the first item in the picker column, that means\n         * the value is out of bounds. In this case, we assign the value to the\n         * first item to match the scroll position of the column.\n         *\n         */\n        this.setValue(items[0].value);\n      }\n    }\n  }\n  /** @internal  */\n  async scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false, false);\n    }\n  }\n  /**\n   * Sets the value prop and fires the ionChange event.\n   * This is used when we need to fire ionChange from\n   * user-generated events that cannot be caught with normal\n   * input/change event listeners.\n   * @internal\n   */\n  async setValue(value) {\n    const { items } = this;\n    this.value = value;\n    const findItem = items.find((item) => item.value === value && item.disabled !== true);\n    if (findItem) {\n      this.ionChange.emit(findItem);\n    }\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]:not([disabled])`);\n  }\n  render() {\n    const { items, color, isActive, numericInput } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { tabindex: 0, class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput,\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), items.map((item, index) => {\n      return (h(\"button\", { tabindex: \"-1\", class: {\n          'picker-item': true,\n          'picker-item-disabled': item.disabled || false,\n        }, \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n          this.centerPickerItemInView(ev.target, true);\n        }, disabled: item.disabled }, item.text));\n    }), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\")));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChange\"]\n  }; }\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal.style = {\n  ios: pickerColumnInternalIosCss,\n  md: pickerColumnInternalMdCss\n};\n\nexport { PickerColumnInternal as ion_picker_column_internal };\n"],"names":["r","registerInstance","e","createEvent","h","H","Host","i","getElement","b","getIonMode","raf","g","getElementRoot","a","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","c","createColorClasses","pickerColumnInternalIosCss","pickerColumnInternalMdCss","PickerColumnInternal","hostRef","ionChange","isScrolling","isColumnVisible","canExitInputMode","isActive","items","color","numericInput","centerPickerItemInView","target","smooth","el","top","offsetTop","clientHeight","scrollTop","scroll","left","behavior","undefined","inputModeChange","ev","detail","useInputMode","inputModeColumn","isColumnActive","setInputModeActive","state","scrollEndCallback","initializeScrollListener","timeout","activeEl","activeItem","scrollCallback","clearTimeout","bbox","getBoundingClientRect","centerX","x","width","centerY","y","height","activeElement","shadowRoot","elementFromPoint","classList","remove","PICKER_COL_ACTIVE","disabled","exitInputMode","add","setTimeout","dataIndex","getAttribute","index","parseInt","selectedItem","value","setValue","addEventListener","destroyScrollListener","removeEventListener","parentEl","scrollActiveItemIntoView","visibleCallback","entries","_a","isIntersecting","oldActive","querySelector","IntersectionObserver","threshold","observe","closest","findItem","find","item","emit","mode","tabindex","class","map","onClick","text","style","ios","md","ion_picker_column_internal"],"sourceRoot":"webpack:///"}